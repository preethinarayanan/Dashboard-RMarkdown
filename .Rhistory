install.packages(c("rjson", "shinydashboard", "viridis"))
install.packages(c("odbc", "pROC"))
library(flexdashboard)
library(highcharter)
library(viridis)
library(tidyverse)
library(rjson)
library(plotly)
#library(quivR)
library(magrittr)
library(crosstalk)
library(DT)
library(lubridate)
library(zoo)
library(shiny)
library(shinydashboard)
source("libraries.R")
source("functions.R")
source("parameters.R")
#### database connection string ####
Driver <- "{SQL Server Native Client 11.0}"
Server <- "dbserver02.arcadvantage.local"
# Driver <- "{ODBC Driver 17 for SQL Server}"
# Server <- "10.1.100.211"
Database <- "DISABILITY"
UID <- "Arrowhead"
#PWD <- .Advocator_pass
Port <- 1433
#password is Disabitlity_2018! for sql
#### Theme ####
custom_theme <- hc_theme(
colors = c('#5CACEE', 'green', 'red'),
chart = list(
backgroundColor = '#FAFAFA',
plotBorderColor = "black"),
xAxis = list(
gridLineColor = "E5E5E5",
labels = list(style = list(color = "#333333")),
lineColor = "#E5E5E5",
minorGridLineColor = "#E5E5E5",
tickColor = "#E5E5E5",
title = list(style = list(color = "#333333"))),
yAxis = list(
gridLineColor = "#E5E5E5",
labels = list(style = list(color = "#333333")),
lineColor = "#E5E5E5",
minorGridLineColor = "#E5E5E5",
tickColor = "#E5E5E5",
tickWidth = 1,
title = list(style = list(color = "#333333"))),
title = list(style = list(color = '#333333', fontFamily = "Lato")),
subtitle = list(style = list(color = '#666666', fontFamily = "Lato")),
legend = list(
itemStyle = list(color = "#333333"),
itemHoverStyle = list(color = "#FFF"),
itemHiddenStyle = list(color = "#606063")),
credits = list(style = list(color = "#666")),
itemHoverStyle = list(color = 'gray'))
source("queries.R")
preds <- fun_query_select_simple(query_select_prediction)
PWD <- .Advocator_pass
#### database connection string ####
Driver <- "{SQL Server Native Client 11.0}"
Server <- "dbserver02.arcadvantage.local"
# Driver <- "{ODBC Driver 17 for SQL Server}"
# Server <- "10.1.100.211"
Database <- "DISABILITY"
UID <- "Arrowhead"
PWD <- .Advocator_pass
Port <- 1433
PWD <- 'Disabitlity_2018!'
#### Theme ####
custom_theme <- hc_theme(
colors = c('#5CACEE', 'green', 'red'),
chart = list(
backgroundColor = '#FAFAFA',
plotBorderColor = "black"),
xAxis = list(
gridLineColor = "E5E5E5",
labels = list(style = list(color = "#333333")),
lineColor = "#E5E5E5",
minorGridLineColor = "#E5E5E5",
tickColor = "#E5E5E5",
title = list(style = list(color = "#333333"))),
yAxis = list(
gridLineColor = "#E5E5E5",
labels = list(style = list(color = "#333333")),
lineColor = "#E5E5E5",
minorGridLineColor = "#E5E5E5",
tickColor = "#E5E5E5",
tickWidth = 1,
title = list(style = list(color = "#333333"))),
title = list(style = list(color = '#333333', fontFamily = "Lato")),
subtitle = list(style = list(color = '#666666', fontFamily = "Lato")),
legend = list(
itemStyle = list(color = "#333333"),
itemHoverStyle = list(color = "#FFF"),
itemHiddenStyle = list(color = "#606063")),
credits = list(style = list(color = "#666")),
itemHoverStyle = list(color = 'gray'))
source("queries.R")
preds <- fun_query_select_simple(query_select_prediction)
batchid_log <- fun_query_select_simple(query_select_batchid)
setwd(here::here())
source("libraries.R")
batchid_log <- readRDS("batchid_log.RDS")
main_dat <- readRDS("main_dat.RDS")
monthly_result <- readRDS("monthly_result.RDS")
result_hear <- readRDS("result_hear.RDS")
result_init <- readRDS("result_init.RDS")
source("functions.R")
<style>
.colored {
background-color: #FAFAFA;
}
</style>
Monitor {data-icon="fa-tv"}
=====================================
<!-- ### Successful batch?  -->
<!-- ```{r} -->
<!-- success <- batchid_log$sucessful[batchid_log$predicted_date == max(batchid_log$predicted_date)] -->
<!-- if(success == TRUE){ -->
<!--   c <- "#169e1b" -->
<!-- } else { -->
<!--   c <- "#ed2c13" -->
<!-- } -->
<!-- valueBox(success, color = c) -->
<!-- ``` -->
<!--   Column {data-width=100 } -->
<!-- ----------------------------------------------------------------------- -->
<!--   ###  -->
<!--   ```{r} -->
<!-- # batchid_log <- readRDS("batchid_log.RDS") -->
<!-- pred_date <- max(batchid_log$predicted_date) -->
<!-- valueBox(pred_date, subtitle = 'Most Recent Predicted Date',  color = "aqua") -->
<!-- ``` -->
Column {}
-----------------------------------------------------------------------
### Overall AUC
```{r}
avg_auc <- round(mean(monthly_result$auc), 4) * 100
flexdashboard::valueBox(value= paste0(sprintf("%s", avg_auc), "%"), color='blue')
tot_id <- length(unique(main_dat$LegalCaseID))
flexdashboard::valueBox(value = format(tot_id, big.mark="," , small.interval=3), color = "green")
tot_nonzero <- main_dat %>%
filter(net_init != 0 | net_hear != 0) %>%
nrow
flexdashboard::valueBox(value = format(tot_nonzero, big.mark="," , small.interval=3), color = 'red')
tot_net <- round(sum(main_dat$net_init, na.rm = TRUE) + sum(main_dat$net_hear, na.rm = TRUE))
flexdashboard::valueBox(value = paste0("$", sprintf("%s", format(tot_net, big.mark="," , small.interval=3))),  color = 'maroon')
att <- round((avg_auc/100 - 0.50) * tot_net)
flexdashboard::valueBox(value = paste0("$", sprintf("%s", format(att, big.mark="," , small.interval=3))), color = 'navy')
avg_att <- round(att / tot_nonzero)
flexdashboard::valueBox(value = paste0("$", sprintf("%s", format(avg_att, big.mark="," , small.interval=3))), color = 'teal')
main_dat2 <- main_dat %>% filter(net_init != 0 | net_hear != 0)
avg_net_wo_zeros <- round(mean(c(main_dat2$net_init, main_dat2$net_hear), na.rm = TRUE))
flexdashboard::valueBox(value = paste0("$", sprintf("%s", format(avg_net_wo_zeros, big.mark="," , small.interval=3))),  color = 'lime')
main_dat %<>%
mutate(zero_init_net = case_when(
.$net_init == 0 | .$net_hear == 0 ~ 1,
TRUE ~ 0))
prop_zeros <- round(sum(main_dat$zero_init_net)/nrow(main_dat), 4) * 100
flexdashboard::valueBox(value = paste0(sprintf("%s", prop_zeros), "%"),color = 'orange')
avg_net <- round(tot_net / tot_id)
flexdashboard::valueBox(value = paste0("$", sprintf("%s", format(avg_net, big.mark="," , small.interval=3))), color = 'purple')
delinquent_account_100 <- result_init %>% select(LegalCaseID, result_init , date_init,    net_init) %>%
filter (result_init == 'Awarded' & net_init == 0 ) %>%
arrange(desc(date_init)) %>%
mutate(today_initial_date = Sys.Date() - date_init)  %>%
head(100)
delinquent_account <- result_init %>% select(LegalCaseID, result_init , date_init,  net_init) %>%
filter (result_init == 'Awarded' & net_init == 0 ) %>%
arrange(desc(date_init)) %>%
mutate(today_initial_date = Sys.Date() - date_init,
date_init1 =  zoo::as.yearmon(date_init))
avgtime_month <- delinquent_account %>% select(today_initial_date, date_init1 ) %>%
group_by(date_init1) %>%
summarise (avg_time = round(mean(today_initial_date),2))  %>% distinct()
x <- c("closure_month")
y <- sprintf("{point.%s}",
c("avg_time"))
tltip <- tooltip_table(x,y)
avgtime_month$date_init1 %<>% as.character()
